//
//  Client.m
//  MVC_NO_IOS
//
//  Created by User on 2019/3/19.
//  Copyright © 2019 User. All rights reserved.
//

/*
 MVC
 ● 高重用性
  1.一个模型可以有多个视图，比如同样是一批数据，可以是柱状展示，也可以是条形展示，还可以是波形展示。
  2.同样，多个模型也可以共享一个视图，同样是一个登录界面，不同用户看到的菜单数量（模型中的数据）不同，或者不同业务权限级别的用户在同一个视图中展示。
 ● 低耦合
  1.因为模型和视图分离，两者没有耦合关系，所以可以独立地扩展和修改而不会产生相互影响
 ● 快速开发和便捷部署
  1.模型和视图分离，可以使各个开发人员自由发挥，做视图的人员和开发模型的人员可以制订自己的计划，然后在控制器的协作下实现完整的应用逻辑
 
 MVC框架还有很多优点，本章主要不是讲解MVC技术，主要是通过讲解设计MVC框架来说明设计模式该怎么应用

 MVC系统架构
 ● 核心控制器
    MVC框架的入口，负责接收和反馈HTTP请求。
 ● 过滤器
    Servlet容器内的过滤器，实现对数据的过滤处理。由于它是容器内的，因此必须依靠容器才能运行，它是容器的一项功能，与容器息息相关
 ● 拦截器
    对进出模型的数据进行过滤，它不依赖系统容器，只过滤MVC框架内的业务数据
 ● 模型管理器
    提供一个模型框架，该框架内的所有业务操作都应该是无状态的，不关心容器对象，例如Session、线程池等
 ● 视图管理器
    管理所有的视图，例如提供多语言的视图等
 ● 辅助工具
    它其实就是一大堆的辅助管理工具，比如文件管理、对象管理等
 
 在我们的MVC框架中，核心控制器是最重要的，我们就先从它着手。核心控制器使用了Servlet容器的过滤器技术，需要编写一个过滤器，所有进入MVC框架的请求都需要经过核心控制器的转发
 注意　拦截器是会影响系统性能的，所有的Action在执行前后都会被拦截器过滤一遍，即使不符合拦截条件的也会被检查一遍，所以非必要情况不要使用拦截器。
 
 我们继续分析，在IoC容器中都会区分对象是单例模式还是多例模式。想想我们的框架，每个HTTP请求都会产生一个线程，如果我们的Action初始化的时候是单例模式会出现什么情况？当并发足够多的时候就会产生阻塞，性能会严重下降，在特殊情况下还会产生线程不安全，这时就需要考虑多例情况。那多例是如何处理呢？使用Clone技术，首先在系统启动时初始化所有的Action，然后每过来一个请求就拷贝一个Action，减少了初始化对象的性能消耗。典型的原型模式，但问题也同时产生了，并发较多时，就可能会产生内存溢出的情况，内存不够用了!于是享元模式就可以上场了，建立一个对象池以容纳足够多的对象
 
  最佳实践
 本章我们粗略地讲解了一个MVC框架。一个MVC框架要考虑的外界环境因素太多了，而且本身MVC框架也是一个轻量型的，就是希望我们编写的程序在没有Struts、Spring MVC等框架的环境中不需要大规模的修改照样能够运行，所以编写一个框架不是一件容易的事情。幸运的是我们以学习模式为主，通过设计MVC框架来了解设计模式。我们来看看本章用到了哪些模式。
 ● 工厂方法模式：通过工厂方法模式把所有的拦截器链实现出来，方便在系统初始化时直接处理。
 ● 单例模式：Action的默认配置都是单例模式，在一般的应用中单例已经足够了，在复杂情况下可以使用享元模式提供应用性能，减少单例模式的性能隐患。
 ● 责任链模式：建立拦截器链以及过滤器链，实现任务的链条化处理。
 ● 迭代器模式：非常方便地遍历拦截器链内的拦截器，而不用再自己写遍历拦截器链的方法。
 ● 中介者模式：以核心控制器为核心，其他同事类都负责为核心控制器“打工”，保证核心控制器瘦小、稳定。
 ● 观察者模式：配置文件修改时，不用重启应用可以即刻生效，提供使用者的体验。
 ● 桥梁模式：使不同的视图配合不同的语言文件，为终端用户展示不同的界面。
 ● 策略模式：对XML文件的检查可以使用两种不同的策略，而且可以在测试机和开发机中使用不同的检查策略，方便系统间自由切换。
 ● 访问者模式：在解析XML文件时，使用访问者非常方便地访问到需要的对象。
 ● 适配器模式：把一个开发者不熟悉的对象转换为熟悉的对象，避免工具或框架对开发者的影响。
 ● 门面模式：Action分发器负责所有的Action的分发工作，它提供了一个调用Action的唯一入口，避免外部模块深入到模型模块内部。
 ● 代理模式：大量使用动态代理，确保了框架的智能化。
 
 
 MVC框架有非常成熟的源码，有兴趣的读者可以看看Struts、Spring MVC等源码，其中包含了非常多的设计模式。读源码是提高设计技能和开发技能的一个重要途径，看一本书是与作者进行了一次心灵交互，看一份源码是与一群作者进行心灵交互，对提高自己的技术修养有非常大的帮助。
 */

#import "Client.h"

@implementation Client

+ (void)execute
{
    
}

@end
